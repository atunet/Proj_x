
//
// 角色相关的协议
//

package Cmd;

import "basetype.proto";
import "roletype.proto";
import "masktype.proto";
import "scenetype.proto";
import "itemtype.proto";

/// 发送角色列表给玩家
message RoleList
{
	optional EProtoId	id			=	1		[default = SEND_ROLE_LIST];
	repeated RoleBase	rolebase	=	2;		//	角色基础信息
}

/// 玩家选择角色上线
message SelectRoleOnline
{
	optional EProtoId	id			=	1		[default = SELECT_ROLE_ONLINE];
	required uint64		roleid		=	2;		// 选择上线的角色id
}

/// 玩家当前角色下线,客户端返回到角色列表,可重新选角登录
message CurrentRoleOffline
{
	optional EProtoId	id			=	1		[default = CURRENT_ROLE_OFFLINE];
}

/// 玩家请求创建角色
message CreateRoleReq
{
	optional EProtoId	id			=	1		[default = CREATE_ROLE_REQ];
	required int32		roletype	=	2;		// 创建角色类型
	required bytes		rolename	=	3;		// 创建角色名称
    repeated uint32     avatar      =   4;      // 角色形象 0眼睛 1鼻子 2嘴巴 3发色
}

/// 创建角色服务器返回
message CreateRoleRet
{
	optional EProtoId	id			=	1		[default = CREATE_ROLE_RET];
	required RoleBase	rolebase	=	2;		// 新角色的基本信息
}

/// 发送角色数据给玩家
message SendRoleData
{
	optional EProtoId	id			=	1		[default = SEND_ROLE_DATA];
	required RoleInfo	roleinfo	=	2;		// 角色初始化数据
}

/// 角色属性变化通知前端
/// ProtoId:ROLE_ATTRCHANGES_S
message RoleAttrChange
{
	optional EProtoId		id			=	1	[default = ROLE_ATTRCHANGES_S];
    repeated RoleAttrPair   changelist  =	2;	// 改变列表
}

/// 获取玩家buff列表
message GetRoleBuffReq
{
    optional EProtoId	id	=	1	[default = ROLE_GETBUFF_C];
}

/// 获取玩家buff列表返回
message GetRoleBuffRet
{
    optional EProtoId	id      =	1	[default = ROLE_GETBUFF_S];
    repeated BuffUnit   list    =	2;
}

//炼金机请求
message GoldMachineReq
{
    optional EProtoId	id				= 1		[default = GOLD_MACHINE_C];
}

//炼金机返回
message GoldMachineRet
{
    optional EProtoId	id				= 1		[default = GOLD_MACHINE_S];
	required uint32		goldnum			= 2;	//获取的金币数
	required uint32		criticalrate	= 3;	//暴击率 1表示不暴击
	required uint32		goldMachineCount = 4;	//炼金机次数
	required uint32		lastGoldMachine = 5;	//上次炼金数量
}

//购买体力请求
message BuyEnergyReq
{
    optional EProtoId	id      =	1		[default = BUY_ENERGY_C];
}

//购买体力返回
message BuyEnergyRet
{
    optional EProtoId	id      =	1		[default = BUY_ENERGY_S];
	required uint32		energy	=	2;		//获取的体力数
	required uint32		buyEnergyCount = 3; //购买炼金机次数

}

message RoleChangeNickReq
{
	optional EProtoId	id		=	1		[default = ROLE_CHANGE_NICK_C];
	required string		name	=	2;		//昵称
}

message RoleChangeNickRet
{
	optional EProtoId	id		=	1		[default = ROLE_CHANGE_NICK_S];
	required string		name	=	2;		//昵称
}

message BuyUseMbReq
{
	optional EProtoId	id				=	1		[default = BUY_USE_MB_C];
	required string		transactionId	=	2;
	required uint32		itemid			=	3;		//购买的商品id
}

message BuyUseMbRet
{
	optional EProtoId	id		=	1		[default = BUY_USE_MB_S];
	required uint32		itemid	=	2;		// 购买的商品id
	required uint32		cash	=	3;		// 得到的魂钻
	required uint32     extraCash = 4;		// 额外获得的魂钻
	required uint32     doubleTimes = 5;	// 双倍次数
}

//客户端通知服务器更新新手引导步骤
message UpdateGuideStepReq
{
    optional EProtoId	id      =	1		[default = UPDATE_GUIDE_STEP];
	required uint32		guide	=	2;
}

//客户端通知服务器开启xx功能/系统
/*message SystemOpenReq
{
    optional EProtoId	id      =	1		[default = SYSTEM_OPEN_REQ];
	required EMask		mask	=	2;
}
*/

//vip等级变化通知
message VipChangeNotiRet
{
	optional EProtoId  id		=	1		[default = VIP_CHANGE_NOTI_S];
	required uint32 oldVip		=   2;      // 老的vip等级
	required uint32 newVip		=   3;		// 新vip等级
}

message MessageGetDressReq
{
    optional EProtoId   id      =   1       [default = GET_DRESS_C];
}

message MessageGetDressRet
{
    optional EProtoId       id      = 1     [default = GET_DRESS_S];
    repeated DressRetUnit   list    = 2;
    optional uint32         equipid = 3;    // 装备时装id
}

message MessageEquipDressReq
{
    optional EProtoId       id          = 1     [default = EQUIP_DRESS_C];
    optional uint32         equipid     = 2;    // 穿上的时装id
    optional uint32         unequipid   = 3;    // 脱下的时装id
}

message MessageEquipDressRet
{
    optional EProtoId       id          = 1     [default = EQUIP_DRESS_S];
    optional uint32         equipid     = 2;    // 穿上的时装id
    optional uint32         unequipid   = 3;    // 脱下的时装id
}

message MessageUpGradeDressReq
{
    optional EProtoId       id          = 1     [default = UPGRADE_DRESS_C];
    optional uint32         dressid     = 2;    // 升阶时装id
    optional bool           isauto      = 3;    // 是否自动升阶
}

message MessageUpGradeDressRet
{
    optional EProtoId       id          = 1     [default = UPGRADE_DRESS_S];
    optional uint32         dressid     = 2;
    optional uint32         lv          = 3;
    optional uint32         exp         = 4;
}

message MessageLockKontOpenReq
{
	optional EProtoId		id			= 1 	[default = LOCKKONT_OPEN_C];
}

message MessageLockKontOpenRet
{
	optional EProtoId		id			= 1 	[default = LOCKKONT_OPEN_S];
	required uint32			lockId		= 2;	// 锁结开启的id
	optional uint32			copyStar    = 3;	// 剩余副本星数
}

message MessageSyncDressNotice
{
	optional EProtoId 		id 			= 1 	[default = SYNC_EQUIPDRESS_S];
	optional DressRetUnit 	equip 		= 2; 	// 装备的时装
}

message MessageMarqueeNotice
{
	optional EProtoId		id			= 1		[default = MARQUEE_NOTI_S];
	required uint32			priority	= 2;	// 优先级 0-系统 1-运营
	required bytes			content		= 3;	// 内容
	required uint32			interval	= 4;	// 间隔
	required uint32			count		= 5;	// 次数
	optional uint32			type		= 6;	// 显示位置: 0-跑马灯与系统聊天 1-只是跑马灯 2-系统聊天
}

message MessageGetClimbTowerReq
{
    optional EProtoId       id          = 1     [default = GET_CLIMBTOWER_C];
}

message MessageGetClimbTowerRet
{
    optional EProtoId       id          = 1     [default = GET_CLIMBTOWER_S];
    optional uint32         type        = 2;    // 尸魂界之路类型 1 体力与力量之路 2 灵力与精神之路
    optional uint32         diff        = 3;    // 尸魂界之路困难度 1 普通 2 困难 3 地狱
    optional uint32         copyid      = 4;    // 正在打的关卡id
    optional uint32         resettimes  = 5;    // 重置次数
    optional uint32         revivetimes = 6;    // 强力复活次数
	optional uint32 		rewardtime 	= 7; 	// 奖励领取时间
    optional uint32         buyresettimes = 8;  // 今日总的重置次数
}

message MessageSelectClimbTowerReq
{
    optional EProtoId       id          = 1     [default = SELECT_CLIMBTOWER_TYPE_C];
    optional uint32         type        = 2;    // 尸魂界之路类型 1 体力与力量之路 2 灵力与精神之路
}

message MessageSelectClimbTowerRet
{
    optional EProtoId       id          = 1     [default = SELECT_CLIMBTOWER_TYPE_S];
    optional uint32         type        = 2;    // 尸魂界之路类型 1 体力与力量之路 2 灵力与精神之路
    optional uint32         diff        = 3;    // 尸魂界之路困难度 0 未选择 1 普通 2 困难 3 地狱
    optional uint32         curcopyid   = 4;    // 当前打的难度
}

message MessageResetClimbTowerReq
{
    optional EProtoId       id          = 1     [default = RESET_CLIMBTOWER_COPY_C];
}

message MessageResetClimbTowerRet
{
    optional EProtoId       id          = 1     [default = RESET_CLIMBTOWER_COPY_S];
    optional uint32         times       = 2;
}

message MessageBuyResetTimesReq
{
    optional EProtoId       id          = 1     [default = BUY_CLIMBTOWERTIMES_C];
}

message MessageBuyResetTimesRet
{
    optional EProtoId       id          = 1     [default = BUY_CLIMBTOWERTIMES_S];
    optional uint32         times       = 2;    // 次数
    optional uint32         buytimes    = 3;
}

message MessageObtainClimbTowerRewardsReq
{
    optional EProtoId       id          = 1     [default = OBTAIN_CLIMBTOWERREWARD_C];
    optional bool           isdouble    = 2;
}

message MessageObtainClimbTowerRewardsRet
{
    optional EProtoId       id          = 1     [default = OBTAIN_CLIMBTOWERREWARD_S];
}

message MessageGetRoleInfoReq
{
	optional EProtoId 		id 			= 1 	[default = GET_ROLEINFO_C];
    optional uint64         roleid      = 2;
}

message MessageGetRoleInfoRet
{
	optional EProtoId 		id 			= 1 	[default = GET_ROLEiNFO_S];
	optional RoleBase 		rolebase 	= 2;
	repeated BladeUnit 		blades 		= 3;
	repeated SoulUnit 		souls 		= 4;
	repeated DressRetUnit 	dress 		= 5;
	optional SoulCoreUnit   soulcore 	= 6;
}

// 角色数据加载完成
message RoleDataLoadOk
{
	optional EProtoId 		id 			= 1 	[default = ROLE_DATA_LOAD_OK];
}

message MessageGetActionReq
{
    optional EProtoId       id          = 1     [default = GET_ACTION_C];
}

message MessageGetActionRankReq
{
    optional EProtoId       id          = 1     [default = GET_ACTIONRANK_C];
    optional uint32         actid       = 2;    // 活动id
    optional uint32         startpos    = 3;    // 开始位置
    optional uint32         offset      = 4;   	// 偏移量
}

message MessageGetActionRewardsReq
{
    optional EProtoId       id          = 1     [default = GET_ACTIONREWARD_C];
    optional uint32         actionid    = 2;
    optional uint32         condid      = 3;
}

message MessageGetActionRewardsRet
{
    optional EProtoId       id          = 1     [default = GET_ACTIONREWARD_S];
}

message MessageSendActionNotify
{
    optional EProtoId       id          = 1     [default = SEND_ACTION_S];
    repeated ActionUnit     info        = 2;
}

message MessageSendActionRankNotify
{
    optional EProtoId       id          = 1     [default = SEND_ACTIONRANK_S];
    optional uint32         actid       = 2;
    optional uint32         count       = 3;    // 总行数
    optional uint32         rank        = 4;    // 我的位置
    optional uint32         score       = 5;    // 我的分数
    optional bool           isget       = 6;    // 是否领奖
    repeated ActionRankUnit list        = 7;    // 列表
}

message MessageSendRedPointNotify
{
    optional EProtoId       id          = 1     [default = SEND_RED_POINT_S];
    required uint32         from_type   = 2;    //见from_type
}

message UpdateBpReq
{
	optional EProtoId		id			= 1		[default = UPDATE_BP_C];
}

message MessageGetRechargeInfoReq
{
	optional EProtoId		id			=	1  [default	= GET_RECHARGE_INFO_C];
}

message MessageGetRechargeInfoRet
{
	optional EProtoId		id			=	1  [default	= GET_RECHARGE_INFO_S];
	repeated ItemCountType  item		=	2; //物品双倍购买次数
}

message GetRoleListReq
{
    optional EProtoId       id      =   1       [default = GET_ROLELIST_C];
	repeated uint64			roleId  =   2;      //角色id列表
	optional uint32			type	=   3;      // 1-基本 2-包含战斗力 3-所有
}

message GetRoleListRet
{
    optional EProtoId       id      =   1       [default = GET_ROLELIST_S];
	repeated RoleBase		rolebase    =   2;      //角色基本信息
}

message ChatBanNoti
{
    optional EProtoId       id      =   1       [default = CHAT_BAN_S];
	required uint32			min		=   2;		//禁言分钟数 0表示无限长
	required uint32			banChat =	3;		//禁言过期时间 大于3600 * 24 * 365为永久禁言
}

message GetFirstChargeRewardReq
{
    optional EProtoId       id      =   1       [default = GET_FIRST_CHARGE_REWARD_C];
}

message GetFirstChargeRewardRet
{
    optional EProtoId       id      =   1       [default = GET_FIRST_CHARGE_REWARD_S];
	required uint32			firstRecharge = 2;	 //首次充值标识 1-已充值 2-已领取
	repeated ItemNotiType	item	= 3;		 //领取奖励
}

message GetTestFeedbackInfoRet
{
    optional EProtoId       id      =   1       [default = GET_TEST_FEEDBACK_INFO_S];
	required uint32			level	=	2;
	required uint32			arenaRank = 3;		// 竞技场排名
	required uint32			flag	=	4;		// 标志 从低位开始
}

message GetTestFeedbackGiftReq
{
    optional EProtoId       id      =   1       [default = GET_TEST_FEEDBACK_GIFT_C];
	required uint32			type	=   2;		//第几档奖励 1-登录  2-竞技场 3-等级
}

message GetTestFeedbackGiftRet
{
    optional EProtoId       id      =   1       [default = GET_TEST_FEEDBACK_GIFT_S];
	required uint32			flag	=	2;      //标志
}

message GetChargeFeedbackInfoRet
{
    optional EProtoId       id      =   1       [default = GET_CHARGE_FEEDBACK_INFO_S];
	required uint32			totalPay=	2;
	required uint32			flag	=	3;		// 标志 从低位开始
}

message GetChargeFeedbackGiftReq
{
    optional EProtoId       id      =   1       [default = GET_CHARGE_FEEDBACK_GIFT_C];
	required uint32			activityId = 2;		//活动id
	required uint32			type	=   3;		//第几档奖励
}

message GetChargeFeedbackGiftRet
{
    optional EProtoId       id      =   1       [default = GET_CHARGE_FEEDBACK_GIFT_S];
	required uint32			flag	=	2;      //标志
}

message GetVipRewardReq
{
    optional EProtoId       id      =   1       [default = GET_VIP_REWARD_C];
	required uint32			vipLevel=	2;		//领哪个vip等级
}

message GetVipRewardRet
{
    optional EProtoId       id      =   1       [default = GET_VIP_REWARD_S];
	required uint32			vipFlag =	2;		//vip奖励标志
}

message SoulCoreGetInfoReq
{
    optional EProtoId       id      =   1       [default = SOULCORE_GET_INFO_C];
}

message SoulCoreGetInfoRet
{
    optional EProtoId       id      =   1       [default = SOULCORE_GET_INFO_S];
	required int32			frees	=	2;		//免费次数
	required SoulCoreUnit	total	=   3;		//整体
	required SoulCoreUnit	cache	=	4;		//缓存
}

message SoulCorePracticeReq
{
    optional EProtoId       id      =   1       [default = SOULCORE_PRACTICE_C];
	required uint32			type	=	2;		//类型 1-基础 2-中级 3-高级
	required uint32			cost	=	3;		//0-免费 1-道具 2-金币
}

message SoulCorePracticeRet
{
    optional EProtoId       id      =   1       [default = SOULCORE_PRACTICE_S];
	required int32			maxhp	=	2;		//最大血量
	required int32			pAtt	=	3;		//物理攻击
	required int32			pDef	=	4;		//物理防御
	required int32			cAtt	=	5;		//灵压攻击
	required int32			cDef	=	6;		//灵压防御
	required int32			cpStren	=	7;		//灵压强化
	required int32			frees	=	8;		//免费次数
}

message SoulCoreSaveReq
{
    optional EProtoId       id      =   1       [default = SOULCORE_SAVE_C];
	optional uint32			type	=	2;		//0-忽略 1-保存
}

message SoulCoreSaveRet
{
    optional EProtoId       id      =   1       [default = SOULCORE_SAVE_S];
}

message GetFreeRewardReq
{
    optional EProtoId       id      =   1       [default = GET_FREE_REWARD_C];
	required uint32			type	=   2;		//第几档 从1开始
}

message GetFreeRewardRet
{
    optional EProtoId       id      =   1       [default = GET_FREE_REWARD_S];
	required uint32			freeRewardFlag = 2; //免费领奖标志
}

message MessageGetStrongRewardReq
{
	optional EProtoId 		id 		= 1 		[default = GET_STRONG_C];
	optional uint32 		index 	= 2;// 领取变强奖励索引
}

message MessageGetStrongRewardRet
{
	optional EProtoId 		id 		= 1 		[default = GET_STRONG_S];
	optional uint32 		index 	= 2;
}

message GetTestFeedback2InfoRet
{
    optional EProtoId       id      =   1       [default = GET_TEST_FEEDBACK2_INFO_S];
	repeated TestFeedBack2Unit gift =	2;
}

message GetTestFeedback2GiftReq
{
    optional EProtoId       id      =   1       [default = GET_TEST_FEEDBACK2_GIFT_C];
	required uint32			itemid	=   2;		//礼包id
}

message GetTestFeedback2GiftRet
{
    optional EProtoId       id      =   1       [default = GET_TEST_FEEDBACK2_GIFT_S];
	required TestFeedBack2Unit gift	=   2;
}

