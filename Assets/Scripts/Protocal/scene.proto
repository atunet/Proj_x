package Cmd;

import "basetype.proto";
import "scenetype.proto";

message MessageEnterCity
{
optional EProtoId       id          = 1 [default = SCENE_ENTERCITY_C];
optional int32          cityid      = 2;    // 城镇id
}

message MessageEnterCopy
{
optional EProtoId 		id			= 1		[default = SCENE_ENTERCOPY_C];
optional int32			copyid		= 2;	// 副本ID, 关卡ID
}

message MessageEnterCopyNotify
{
optional EProtoId 		id			= 1		[default = SCENE_ENTERCOPY_S];
optional int32			copyid		= 2;	// 副本ID
required FightMode		mode		= 3;	// 战斗模式
optional int32			buffseed	= 4;	// buff随机种子
optional int32			monsterseed	= 5;	// 怪物随机种子
repeated CopyUnitInfo	unitlist	= 6;	// 副本中玩家的信息
}

message MessageEnterCopyPkNotify
{
optional EProtoId           id          = 1     [default = SCENE_ENTERCOPYPK_S];
optional int32              copyid      = 2;    // 副本id
repeated PkCopyUnitInfo 	unitlist    = 3;    // 玩家的信息
}

message MessageCopyReady
{
optional EProtoId 		id			= 1		[default = SCENE_COPYREADY_C];
optional int32          time        = 2;    // 开始时间
}

message MessageStartFight
{
optional EProtoId 		id			= 1		[default = SCENE_STARTFIGHT_S];
}

message MessageExitCopy
{
optional EProtoId 	 	id			= 1		[default = SCENE_EXITCOPY_C];
}

message MessageEnterScene
{
optional EProtoId 		id 			= 1 	[default = SCENE_ENTERSCENE_S];
optional uint32 		sceneid 	= 2;	// 玩家所在场景id
optional int32 			pos_x 		= 3;	// 位置x坐标
optional int32 			pos_y 		= 4;	// 位置y坐标
}

message MessageLeaveScene
{
optional EProtoId 		id 			= 1 	[default = SCENE_LEAVESCENE_S];
}

message MessageTalkNpcRequest
{
optional EProtoId       id          = 1     [default = SCENE_TALKNPC_C];
required int32          npcid       = 2;    // 对话的npcid
}

message MessageCopyListRequest
{
optional EProtoId       id          = 1     [default = SCENE_COPYLIST_C];
}

message MessageCopyListResponse
{
optional EProtoId       id          = 1     [default = SCENE_COPYLIST_S];
repeated CopyStatusInfo list        = 2;
}

message MessageBuyItemRequest
{
optional EProtoId       id          = 1     [default = SCENE_BUYITME_C];
required uint32         shopid      = 2;    // 商品id
optional uint32         shoptype    = 3;    // 商店类型
}

message MessageBuyItemResponse
{
optional EProtoId       id          = 1     [default = SCENE_BUYITEM_S];
required uint32         shopid      = 2;    // 商品id
required uint32         num         = 3;    // 剩余数量
optional uint32         creditcoin  = 4;    // 荣誉币
optional uint32         shoptype    = 5;    // 商店类型
}

message MessageRefreshShopRequest
{
optional EProtoId       id          = 1     [default = SCENE_REFRESHSHOP_C];
optional uint32         type        = 2;    // 1 元宝刷新 2 到时间自动刷新
optional uint32         shoptype    = 3;    // 商店类型
}

message MessageRefreshShopResponse
{
optional EProtoId       id          = 1     [default = SCENE_REFRESHSHOP_S];
optional uint32         timestamp   = 2;
optional uint32         shoptype    = 3;
}

message MessageGetShopRequest
{
optional EProtoId       id          = 1     [default = SCENE_GETSHOPS_C];
optional uint32         type        = 2;    // 商店类型 3竞技场商店 4演武场商店
}

message MessageShopsNotice
{
optional EProtoId       id          = 1     [default = SCENE_SENDSHOPS_S];
repeated ShopUnitInfo   list        = 2;    // 商品列表
required uint32         count       = 3;    // 刷新次数
optional uint32         creditcoin  = 4;    // 荣誉币/演武币
optional uint32         type        = 5;    // 商店类型
}

message MessageBattleReviveRequest
{
optional EProtoId 		id 			= 1 	[default = SCENE_BATTLEREVIVE_C];
optional bool           isfree      = 2;    // 是否免费
optional uint32         sequence    = 3;
}

message MessageMonsterReviveRequest
{
optional EProtoId 		id 			= 1 	[default = SCENE_MONSTERREVIVE_C];
repeated uint64 		unitids 	= 2;
optional uint32         sequence    = 3;
}

message MessageAgreePKRequest
{
optional EProtoId 		id 			= 1 	[default = SCENE_AGREEPK_C];
required uint64 		inviteid 	= 2; 	// 邀请者id
required uint32 		serverid 	= 3; 	// 邀请者所在场景服务器id
}

message MessageStartSweepRequest
{
optional EProtoId 		id 			= 1 	[default = SCENE_SWEEP_C];
required uint32 		copyid 		= 2; 	// 关卡id
required uint32 		nums 		= 3; 	// 扫荡次数
required uint32         type        = 4;    // 1是扫荡劵 2是钻石扫荡
}

message MessageEndSweepResponse
{
optional EProtoId 		id 			= 1 	[default = SCENE_SWEEP_S];
repeated SweepUnitInfo  rewards     = 2;    // 奖励
}

message MessageBuyCopyNumRequest
{
optional EProtoId 		id 			= 1 	[default = SCENE_BUYCOPYNUM_C];
required uint32 		copyid 		= 2; 	// 关卡id
optional uint32         type        = 3;    // 1 是结晶购买 2 是魂钻购买
}

message MessageBuyCopyNumResponse
{
optional EProtoId 		id 			= 1 	[default = SCENE_BUYCOPYNUM_S];
required uint32 		copyid 		= 2; 	// 关卡id
required uint32 		nums 		= 3; 	// 可打数量
}

message MessageGetChapterRewardInfoRequest
{
optional EProtoId       id          = 1     [default = SCENE_CHAPTERREWARDINFO_C];
required uint32         teleid      = 2;    // 章节奖励
}

message MessageGetChapterRewardInfoResponse
{
optional EProtoId       id          = 1     [default = SCENE_CHAPTERREWARDINFO_S];
required uint32         teleid      = 2;    // 章节id
required uint32         value       = 3;    // 奖励领取情况
}

message MessageGetChapterRewardRequest
{
optional EProtoId       id          = 1     [default = SCENE_CHAPTERREWARD_C];
required uint32         teleid      = 2;    // 章节id
required uint32         rwdtype     = 3;    // 领取奖励类型 1 普通奖励 2 vip1奖励 3 vip2奖励
required uint32         teltype     = 4;    // 章节类型 1 普通 2 精英
}

message MessageGetChapterRewardResponse
{
optional EProtoId       id          = 1     [default = SCENE_CHAPTERREWARD_S];
repeated CopyRewards    rewards     = 2;    // 奖励信息
required uint32         rwdtype     = 3;    // 领取奖励类型 1 普通奖励 2 vip1奖励 3 vip2奖励
}

message MessageGetGiftRequest
{
optional EProtoId 		id 			= 1 	[default = SCENE_GETGIFT_C];
required string 		gift 		= 2; 	// 获取礼品码
}

message MessageGetGiftResponse
{
optional EProtoId 		id 			= 1 	[default = SCENE_GETGIFT_S];
repeated CopyRewards 	rewards 	= 2; 	// 奖励信息
}

message MessageRobotsRequest
{
optional EProtoId 		id 			= 1 	[default = SCENE_ROBOTS_C];
}

message MessageRobotsResponse
{
optional EProtoId 		id 			= 1 	[default = SCENE_ROBOTS_S];
repeated RobotUnit 		robots 		= 2; 	// 机器人
optional bool           isover      = 3;    // true 没有包了 false 还有包
}

message MessageEnterSoulFightNotify
{
optional EProtoId       id          = 1     [default = SCENE_SOULFIGHT_S];
optional uint32         perfectID   = 2;    // 完成条件
}

message MessageOpenCityNotify
{
optional EProtoId 		id 			= 1 	[default = SCENE_OPENCITY_S];
repeated uint32 		citys 		= 2;
}

message MessageEnterClimbTowerCopyReq
{
optional EProtoId       id          =   1   [default = SCENE_ENTER_CLIMBTOWERCOPY_C];
}

message MessageEnterWorldCopyRet
{
optional EProtoId       id          =   1   [default = SCENE_ENTER_WORLDCOPY_S];
optional uint64         bossid      =   2;  // bossid
optional uint32         bosshp      =   3;  // boss血量
optional uint32         hitdown     =   4;  // 被击倒次数
repeated uint64         unitids     =   5;  // 角色id
}

message MessageWait4StartReq
{
optional EProtoId 		id 			= 	1 [default = SCENE_WAIT4START_C];
}